BCSAT always requires two key command-line parameters:
  1) an algorithm to use, specified with the [-alg] parameter, and
  2) a SAT instance file to solve, specified with [-i] parameter

For example, to use the SAPS algorithm to solve the instance file sample.cnf

  >ubcsat -alg saps -i sample.cnf

If your primary goal is to find a solution, use the [-solve] parameter

  >ubcsat -alg saps -i sample.cnf -solve

To analyze the behaviour of an SLS algorithm, you must run it several times.
To run the same algorithm 100 times with a maximum of a million steps per run:

  >ubcsat -alg saps -i sample.cnf -runs 100 -cutoff 1000000

For additional help, consult one of the following:

  ubcsat -hp    list all of the [p]arameters
  ubcsat -ha    list the available [a]lgorithms
  ubcsat -hw    list the available [w]eighted algorithms
  ubcsat -hr    list the available [r]eports
  ubcsat -hc    For help with the [c]olumns of the default output report
  ubcsat -hs    For help with the [s]tatistics report

Consult the website and email ubcsat-help [@] cs.ubc.ca for support









p    cnf     5  9  
5 pour les variables propositionnelles
9 pour le nombre de clauses
Chaque clause se termine par 0
-1 représente l'instance !a
a=1 b=2 c=3 d=4 e=5






D:\UBCSAT>ubcsat -alg saps -i test1.cnf -solve                                    
# 
# UBCSAT version 1.1.0 (Sea to Sky Release)
#
# http://www.satlib.org/ubcsat
#
# ubcsat -h for help
#
#  -alg saps
#  -runs 1
#  -cutoff 100000
#  -timeout 0
#  -gtimeout 0
#  -noimprove 0
#  -target 0
#  -wtarget 0
#  -seed 731477501
#  -solve 1
#  -find,-numsol 1
#  -findunique 0
#  -srestart 0
#  -prestart 0
#  -drestart 0
#
#  -alpha 1.3
#  -rho 0.8
#  -ps 0.05
#  -wp 0.01
#  -sapsthresh -0.1
#
# UBCSAT default output:
#    'ubcsat -r out null' to suppress, 'ubcsat -hc' for customization help
#
# 
# Output Columns: |run|found|best|beststep|steps|
#
# run: Run Number
# found: Target Solution Quality Found? (1 => yes)
# best: Best (Lowest) # of False Clauses Found
# beststep: Step of Best (Lowest) # of False Clauses Found
# steps: Total Number of Search Steps
#
#       F  Best       Step      Total
#   Run N Sol'n         of     Search
#   No. D Found       Best      Steps
#
      1 1     0          1          1
#
# Solution found for -target 0

 1 2 -3 -4 5    


Variables = 5
Clauses = 11
TotalLiterals = 27
TotalCPUTimeElapsed = 0.000
FlipsPerSecond = 1
RunsExecuted = 1
SuccessfulRuns = 1
PercentSuccess = 100.00
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0
D:\UBCSAT>

Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0
D:\UBCSAT>

Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0

D:\UBCSAT>

Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0

Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0

Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Mean = 1
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0


 1 2 -3 -4 5    
 a b !c !d e














 D:\UBCSAT>ubcsat -alg saps -i test.cnf -solve
# 
# UBCSAT version 1.1.0 (Sea to Sky Release)
# 
# http://www.satlib.org/ubcsat
# 
# ubcsat -h for help
# 
#  -alg saps
#  -runs 1 
#  -cutoff 100000 
#  -timeout 0 
#  -gtimeout 0 
#  -noimprove 0 
#  -target 0 
#  -wtarget 0 
#  -seed 731787253 
#  -solve 1 
#  -find,-numsol 1 
#  -findunique 0 
#  -srestart 0 
#  -prestart 0
#  -drestart 0
#
#  -alpha 1.3
#  -rho 0.8
#  -ps 0.05
#  -wp 0.01
#  -sapsthresh -0.1
#
# UBCSAT default output:
#    'ubcsat -r out null' to suppress, 'ubcsat -hc' for customization help
#
#
# Output Columns: |run|found|best|beststep|steps|
#
# run: Run Number
# found: Target Solution Quality Found? (1 => yes)
# best: Best (Lowest) # of False Clauses Found
# beststep: Step of Best (Lowest) # of False Clauses Found
# steps: Total Number of Search Steps
#
#       F  Best       Step      Total
#   Run N Sol'n         of     Search
#   No. D Found       Best      Steps
#
      1 1     0          1          1
#
# Solution found for -target 0

 1 2 -3 -4 5


Variables = 5
Clauses = 9
TotalLiterals = 23
TotalCPUTimeElapsed = 0.001
FlipsPerSecond = 1000
RunsExecuted = 1
SuccessfulRuns = 1
PercentSuccess = 100.00
Steps_Mean = 1
Steps_CoeffVariance = 0
Steps_Median = 1
CPUTime_Mean = 0.000999927520752
CPUTime_CoeffVariance = 0
CPUTime_Median = 0.000999927520752

 1 2 -3 -4 5
 a b !c !d e








Etape 3

Na Nb Nc Cea Ceb Cec Ma Mb Mc Coa Cob Coc 
1   2  3  4   5    6  7  8  9  10  11  12

Na => Cea       (!Na ou Cea)        (!1 ou 4)
Nb => Ceb       (!Nb ou Ceb)        (!2 ou 5)
Nc => Cec       (!Nc ou Cec)        (!3 ou 6)

Cea => Ma       (!Cea ou Ma)        (!4 ou 7)
Ceb => Mb       (!Ceb ou Mb)        (!5 ou 8)
Cec => Mc       (!Cec ou Mc)        (!6 ou 9)

Na => Coa       (!Na ou Coa)        (!1 ou 10)
Nb => Cob       (!Nb ou Cob)        (!2 ou 11)
Nc => Coc       (!Nc ou Coc)        (!3 ou 12)

Na  1
Nb  2
Nc  3


Exceptions

"les cephalopodes qui ne sont pas des nautiles n'ont pas de coquille"
((Cea et ! Na) => !Coa)         (!(Cea et ! Na) ou !Coa)        (!Cea ou Na ou !Coa)        (!4 ou 1 ou !10)
((Ceb et ! Nb) => !Cob)         (!(Ceb et ! Nb) ou !Cob)        (!Ceb ou Nb ou !Cob)        (!5 ou 2 ou !11)
((Cec et ! Nc) => !Coc)         (!(Cec et ! Nc) ou !Coc)        (!Cec ou Nc ou !Coc)        (!6 ou 3 ou !12)

"Les mollusques qui ne sont pas des cephalopodes non nautiles en ont une"
((Ma et ! (Cea et ! Na )) => Coa)       (!(Ma et ! (Cea et ! Na )) ou Coa)      ((!Ma ou !!(Cea et ! Na )) ou Coa)      (((!Ma ou Cea) et (!Ma ou !Na)) ou Coa)    (!Ma ou Cea ou Coa) et (!Ma ou !Na ou Coa)
(!Ma ou Cea ou Coa)     (!7 ou 4 ou 10)
(!Ma ou !Na ou Coa)     (!7 ou !1 ou 10)

((Mb et ! (Ceb et ! Nb )) => Cob)
(!Mb ou Ceb ou Cob)     (!8 ou 5 ou 11)
(!Mb ou !Nb ou Cob)     (!8 ou !2 ou 11)

((Mc et ! (Cec et ! Nc )) => Coc)
(!Mc ou Cec ou Coc)     (!9 ou 6 ou 12)
(!Mc ou !Nc ou Coc)     (!9 ou !3 ou 12)


D:\UBCSAT>ubcsat -alg saps -i cephalopode.cnf -solve 
# 
# UBCSAT version 1.1.0 (Sea to Sky Release)
# 
# http://www.satlib.org/ubcsat
# 
# ubcsat -h for help
#
#  -alg saps
#  -runs 1
#  -cutoff 100000
#  -timeout 0
#  -gtimeout 0
#  -noimprove 0
#  -target 0
#  -wtarget 0
#  -seed 751314325
#  -solve 1
#  -find,-numsol 1
#  -findunique 0
#  -srestart 0
#  -prestart 0
#  -drestart 0
#
#  -alpha 1.3
#  -rho 0.8
#  -ps 0.05
#  -wp 0.01
#  -sapsthresh -0.1
#
# UBCSAT default output:
#    'ubcsat -r out null' to suppress, 'ubcsat -hc' for customization help
#
#
# Output Columns: |run|found|best|beststep|steps|
#
# run: Run Number
# found: Target Solution Quality Found? (1 => yes)
# best: Best (Lowest) # of False Clauses Found
# beststep: Step of Best (Lowest) # of False Clauses Found
# steps: Total Number of Search Steps
#
#       F  Best       Step      Total
#   Run N Sol'n         of     Search
#   No. D Found       Best      Steps
#
      1 1     0          4          4
#
# Solution found for -target 0

 -1 -2 -3 4 -5 -6 7 8 -9 -10
 11 12


Variables = 12
Clauses = 15
TotalLiterals = 36
TotalCPUTimeElapsed = 0.000
FlipsPerSecond = 1
RunsExecuted = 1
SuccessfulRuns = 1
PercentSuccess = 100.00
Steps_Mean = 4
Steps_CoeffVariance = 0
Steps_Median = 4
CPUTime_Mean = 0
CPUTime_CoeffVariance = 0
CPUTime_Median = 0




-1 -2 -3 4 -5 -6 7 8 -9 -10 11 12
!Na !Nb !Nc Cea !Ceb !Cec Ma Mb !Mc !Coa Cob Coc






















 Etape 4:

Explication des étapes :
1/Négation de la formule :
 Pour utiliser le raisonnement par l'absurde, on commence par nier la formule ϕ que l'on souhaite tester. 
 Cela donne ¬ϕ.

2/Union de la base de connaissances et de la négation de la formule :
 On ajoute ¬ϕ à la base de connaissances BC. 
 Cela revient à supposer que ϕ est faux et à voir si cela conduit à une contradiction.

3/ Appel a solveur Sat:
 On utilise un solveur SAT (Satisfiability Solver) pour vérifier si BC′est satisfiable.
 Si BC′est non satisfiable, cela signifie que l'hypothèse ¬ϕ conduit à une contradiction, donc 
 ϕ doit être vrai dans BC. Ainsi, BC⊨ϕ.
 Si BC ′est satisfiable, cela signifie qu'il existe au moins un modèle où 
 ¬ϕ est vrai sans contradiction, donc ϕ n'est pas inféré par BC. Ainsi, BC⊭ϕ.


 Algorithme InférenceParAbsurde(BC, φ)
    // Étape 1: Négation de la formule
    ¬φ = Négation(φ)
    
    // Étape 2: Union de la base de connaissances et de la négation de la formule
    BC' = Union(BC, {¬φ})
    
    // Étape 3: Appel à un solveur SAT
    résultat = SAT(BC')
    
    // Étape 4: Interprétation du résultat
    Si résultat == "Non satisfiable" Alors
        Retourner Vrai  // BC ⊨ φ
    Sinon
        Retourner Faux  // BC ⊭ φ
    Fin Si
Fin Algorithme